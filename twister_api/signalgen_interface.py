"""
This module handles interfacing with the Keysight E8257D.

Do not edit this file unless you know what you are doing.
"""

import atexit
from contextlib import contextmanager
import math

import pyvisa

import twister_api.waveformgen_interface as waveformgen_interface


# Module level variables
instance1 = None
instance2 = None

class SignalGenerator:
    def __init__(self, device_no=None, visa_address=None, *,
                visa_library="C:\\WINDOWS\\system32\\visa64.dll", debug=False):
        self.debug = debug
        atexit.register(self.shutdown)

        if visa_address is None:
            if device_no:
                # These are the VISA addresses of the two signal generators we have at time of writing
                if device_no == 1:
                    visa_address = "TCPIP0::10.10.10.21::inst0::INSTR"
                    self.name = "psg1"
                    global instance1
                    instance1 = self
                elif device_no == 2:
                    visa_address = "TCPIP0::10.10.10.22::inst0::INSTR"
                    self.name = "psg2"
                    global instance2
                    instance2 = self
                else:
                    raise ValueError("Valid device_no: 1, 2")

        rm = pyvisa.ResourceManager(visa_library)
        try:
            pyvisa.resources.Resource: self.visa  # type hinting
            self.visa = rm.open_resource(visa_address)
        except pyvisa.errors.VisaIOError as e:
            print(f"Error connecting to device string '{visa_address}' ({self.name}). Is the device connected?")
            raise e


    def shutdown(self):
        self.visa.close()


    #TODO: add functions to enable and disable RF output
    #TODO: find a way to check for awg output state before disabling LO to protect CCU

    def output_enabled(self) -> bool:
        """Returns True if PSG output is enabled"""
        return bool(int(self.do_query(':OUTPut:STATe?')))

    
    @contextmanager
    def enable_output(self):
        """Context manager will autmatically disable output when context block is complete."""
        try:
            self.set_output_on()
            yield
        finally:
            self.set_output_off()


    def set_output_on(self):
        self.do_command(":OUTPut:STATe ON")
        if self.debug:
            print(f"Set {self.name} output to {self.do_query(':OUTPut:STATe?')}")


    def set_output_off(self):
        if waveformgen_interface.instance.output_enabled():
            print("Warning: AWG output is still enabled. Disable AWG output before disabling LO")
        else:
            self.do_command(":OUTPut:STATe OFF")
            if self.debug:
                print(f"Set {self.name} output to {self.do_query(':OUTPut:STATe?')}")

    
    def set_frequency(self, frequency: float):
        """Sets frequency down to .001Hz precision"""
        self.do_command(f":FREQuency:FIXed {frequency:.13E}")
        if self.debug:
            print(f"Set {self.name} frequency to {float(self.do_query(':FREQuency:FIXed?'))/1e9} GHz")


    def set_phase(self, degree: float):
        """Sets output phase to <degree> degrees relative to reference."""
        self.do_command(f":PHASe {degree}DEG")
        if self.debug:
            print(f"Set {self.name} phase to {float(self.do_query(':PHASe?'))*180/math.pi:.2f} degrees")


    def set_phase_reference(self):
        """Sets current phase to 0 degree reference"""
        self.do_command(":PHASe:REFerence")
        if self.debug:
            print(f"Set {self.name} phase reference")



    def do_command(self, command):
        """Executes SCPI command on the PSG."""
        self.visa.write(str(command))


    def do_query(self, query):
        result = self.visa.query(str(query))
        return result.rstrip()