"""
This module provides a standard for saving waveform data to a file.

The file format may be modified as long as the load_waveform() function retains backwards compatibility with all previous filetypes.

Requirements for compatibility:
* All formats should be big-endian
* The first two bytes should contain the format version. This allows the proper decoding method to be determined automatically.

Do not edit this file unless you know what you are doing.
"""

from array import array
import pickle

change_red = "\033[31m"
change_default = "\033[37m"


def save_waveform(waveform, samp_rate, filepath):
    version = 2
    ver = version.to_bytes(2, 'big')
    sample_rate = int(samp_rate).to_bytes(8, 'big')
    num_samples = len(waveform).to_bytes(8, 'big')

    for dtype in ('b', 'h', 'f'):
        try:
            data = array(dtype, waveform).tobytes()
            break
        except OverflowError:
            continue
    
    sample_type = bytes(dtype, 'ascii')

    with open(filepath, 'wb') as outp:
        outp.write(ver)
        outp.write(sample_rate)
        outp.write(num_samples)
        outp.write(sample_type)
        outp.write(data)


def load_waveform(filepath):  
    # If data is pickled (this is a deprecated format retained for backwards compatibility)
    if filepath.endswith(".pkl"):
        return _load_pickle(filepath)

    # Else, get format version number from binary file
    with open(filepath, 'rb') as file:
        version = int.from_bytes(file.read(2), 'big')

    # Load the file depending on the format
    if version == 1:
        return _load_bin1(filepath)
    if version == 2:
        return _load_bin2(filepath)


def _load_bin2(filepath):
    """ [bytes] - description
    -
    [0:1] - version (2 bytes)
    [2:9] - samplerate (8 bytes)
    [10:17] - sample count (8 bytes)
    [18] - sample type (1 byte ascii)
    [19:] - samples (N * <sample size> bytes)
    """

    with open(filepath, 'rb') as inp:
        version = int.from_bytes(inp.read(2), 'big')
        if version != 2:
            print(f"{change_red}Error: waveform file format version {version} incompatible with load function \"_load_bin2\".{change_default}")
            return
        samp_rate = int.from_bytes(inp.read(8), 'big')
        samp_count = int.from_bytes(inp.read(8), 'big')
        sample_type = inp.read(1).decode('ascii')
        data = array(sample_type)
        data.frombytes(inp.read())

    samples = data.tolist()

    if len(data) != samp_count:
        print(f"{change_red}Warning: error loading file '{filepath}'.\nPayload size does not match advertised sample count. Data may be corrupted{change_default}")

    return (samp_rate, samp_count, samples)


def _load_bin1(filepath):
    """ [bytes] - description
    -
    [0:1] - version (2 bytes)
    [2:9] - samplerate (8 bytes)
    [10:17] - sample count (8 bytes)
    [18:] - samples (n bytes)"""
    
    data = array('i')

    with open(filepath, 'rb') as inp:
        version = int.from_bytes(inp.read(2), 'big')
        if version != 1:
            print(f"{change_red}Error: waveform file format version {version} incompatible with load function \"_load_bin1\".{change_default}")
            return
        samp_rate = int.from_bytes(inp.read(8), 'big')
        samp_count = int.from_bytes(inp.read(8), 'big')
        data.frombytes(inp.read())
    
    samples = data.tolist()

    if len(data) != samp_count:
        print(f"{change_red}Warning: error loading file '{filepath}'.\nPayload size does not match advertised sample count. Data may be corrupted{change_default}")

    return (samp_rate, samp_count, samples)


def _load_pickle(filepath):
    with open(filepath, 'rb') as inp:
        samp_rate = pickle.load(inp)
        num_samples = pickle.load(inp)
        waveform = pickle.load(inp)

    return (samp_rate, num_samples, waveform)


if __name__ == '__main__':
    pass
