"""
This module provides functions to automate many processes that are performed 
frequently with the TWISTER equipment

Do not edit this file unless you know what you are doing.
"""

from math import pi, sqrt, sin, cos, asin, acos

import oscilloscope_interface
import waveformgen_interface
import signalgen_interface


class Utils:
    def __init__(self, *, debug=False):
        self.debug = debug
        self.scope = oscilloscope_interface.instance
        self.awg = waveformgen_interface.instance
        self.psg1 = signalgen_interface.instance1
        self.psg2 = signalgen_interface.instance2

    ## Decorators

    def full_stack(func):
        """Checks that all required VISA devices have been initialized."""
        def wrapper(self):
            if not self.scope:
                raise Exception("Required Oscilloscope device was not initialized")
            if not self.awg:
                raise Exception("Required WaveformGenerator device was not initialized")
            if not self.psg1 or not self.psg2:
                raise Exception("Required SignalGenerator device was not initialized")
            func(self)
        return wrapper

    
    ## Util Functions

    # Automatically adjusts the phase on one of the local oscillators 
    # until the received signal is maximized

    @full_stack
    def peak_phase(self, psg_to_adjust=1, diff_step=pi/8):
        """todo description
        diff_step must be less than or equal to 1/2 of the upconverted LO period
        if the upconverters have a multiplier of n, then actual period will be (2pi)/n
        for the maximum upconverter multiplier (12 as of this writing)
        diff_step <= math.pi/6"""
        try:
            psg = [self.psg1, self.psg2][psg_to_adjust - 1]
        except IndexError:
            raise IndexError("Valid indices for Analog Signal Generator device: [1, 2]")

        ### awg:
            # save current awg settings
            # set output to sinewave (IF should be near the testing IF i think (take as parameter?))
        
        ### scope
        # save current oscilloscope settings
        #setup_bytes = self.scope.do_query_ieee_block(":SYSTem:SETup?")
        # default setup
        #self.scope.do_command("*RST")
        # autoscale for trigger
        #self.scope.do_command(":AUToscale")
        #self.scope.do_command(":FUNCtion1:AVERage CHANnel1,16")
        # may need to set y scale
        
        # execute algo
        psg.set_phase_reference()
        # measure point 1
        p1 = float(self.scope.do_query(':MEASure:VPP? FUNCtion1'))
        if self.debug:
            print(f"Measured vpp at p1: {p1}")

        # advance phase by diff_step
        psg.set_phase(diff_step)
        # measure new received power
        p2 = float(self.scope.do_query(':MEASure:VPP? FUNCtion1'))
        if self.debug:
            print(f"Measured vpp at p2: {p2}")

        # advance phase by another diff_step
        psg.set_phase(2*diff_step)
        # measure new received power
        p3 = float(self.scope.do_query(':MEASure:VPP? FUNCtion1'))
        if self.debug:
            print(f"Measured vpp at p3: {p3}")

        if 9.99999e37 in [p1, p2, p3]:
            print("Error measuring peak, measured signal saturated (adjust channel 1 scale)")
            return

        # describe the received amplitude as A*sin(w*x+phi)
        w = acos((p1+p3)/(2*p2))/diff_step

        A = sqrt(p1**2 + ((p2-p1*cos(w))/sin(w))**2)

        phi = asin(p1/A)

        # peak of sine wave is at pi/2 - phi
        psg.set_phase(pi/2 - phi)

        # reload original scope settings
        #self.scope.do_command_ieee_block(":SYSTem:SETup", setup_bytes)
        # set awg to original settings
